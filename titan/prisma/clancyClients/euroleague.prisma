generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_EUROLEAGUE")
  schemas  = ["dev", "logs", "qa", "uat"]
}

model dev_contracts {
  id                Int      @id @default(autoincrement())
  contract_name     String   @unique(map: "constract_unique_contract_name") @db.VarChar
  contract_address  String   @unique(map: "constraint_unique_contract_address") @db.VarChar
  contract_artifact String   @db.VarChar
  created_at        DateTime @db.Timestamptz(6)
  updated_at        DateTime @db.Timestamptz(6)
  odoo_token_id     Int

  @@map("contracts")
  @@schema("dev")
}

model dev_tokens {
  id                  Int      @id @default(autoincrement())
  contract_id         Int
  created_at          DateTime @db.Timestamptz(6)
  updated_at          DateTime @db.Timestamptz(6)
  blockchain_token_id Int
  odoo_token_id       Int

  @@map("tokens")
  @@schema("dev")
}

model dev_users {
  id             Int      @id @default(autoincrement())
  username_aws   String   @unique(map: "unique_username") @db.VarChar
  created_at     DateTime @db.Timestamptz(6)
  updated_at     DateTime @db.Timestamptz(6)
  wallet_address String   @db.VarChar

  @@map("users")
  @@schema("dev")
}

model qa_contracts {
  id                Int      @id @default(autoincrement())
  contract_name     String   @unique(map: "constract_unique_contract_name") @db.VarChar
  contract_address  String   @unique(map: "constraint_unique_contract_address") @db.VarChar
  contract_artifact String   @db.VarChar
  created_at        DateTime @db.Timestamptz(6)
  updated_at        DateTime @db.Timestamptz(6)
  odoo_token_id     Int

  @@map("contracts")
  @@schema("qa")
}

model qa_tokens {
  id                  Int      @id @default(autoincrement())
  contract_id         Int
  created_at          DateTime @db.Timestamptz(6)
  updated_at          DateTime @db.Timestamptz(6)
  blockchain_token_id Int
  odoo_token_id       Int

  @@map("tokens")
  @@schema("qa")
}

model qa_users {
  id             Int      @id @default(autoincrement())
  username_aws   String   @unique(map: "unique_username") @db.VarChar
  created_at     DateTime @db.Timestamptz(6)
  updated_at     DateTime @db.Timestamptz(6)
  wallet_address String   @db.VarChar

  @@map("users")
  @@schema("qa")
}

model uat_contracts {
  id                Int      @id @default(autoincrement())
  contract_name     String   @unique(map: "constract_unique_contract_name") @db.VarChar
  contract_address  String   @unique(map: "constraint_unique_contract_address") @db.VarChar
  contract_artifact String   @db.VarChar
  created_at        DateTime @db.Timestamptz(6)
  updated_at        DateTime @db.Timestamptz(6)
  odoo_token_id     Int

  @@map("contracts")
  @@schema("uat")
}

model uat_tokens {
  id                  Int      @id @default(autoincrement())
  contract_id         Int
  created_at          DateTime @db.Timestamptz(6)
  updated_at          DateTime @db.Timestamptz(6)
  blockchain_token_id Int
  odoo_token_id       Int

  @@map("tokens")
  @@schema("uat")
}

model uat_users {
  id             Int      @id @default(autoincrement())
  username_aws   String   @unique(map: "unique_username") @db.VarChar
  created_at     DateTime @db.Timestamptz(6)
  updated_at     DateTime @db.Timestamptz(6)
  wallet_address String   @db.VarChar

  @@map("users")
  @@schema("uat")
}

model log_history {
  id          Int      @id @default(autoincrement())
  environment String   @db.VarChar
  class_name  String   @db.VarChar
  method_name String   @db.VarChar
  description String   @db.VarChar
  severity    Int
  created_at  DateTime @db.Timestamptz(6)

  @@schema("logs")
}

model log_severity {
  id            Int    @id @default(autoincrement())
  severity_name String @db.VarChar

  @@schema("logs")
}
